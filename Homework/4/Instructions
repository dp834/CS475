In this assignment, you will implement a very simple network security protocol.
Authentication is based on public key encryption and messages are encrypted by a key shared during the authentication phase.
It is assumed that both the client and the server have a copy of each other's public key.

Authentication and key exchange consist of two steps:

    1. Client sends  E_s(N_c) where  E_s is the server's encryption function based on its public key and  N_c is the name on the client which is authenticating to the server.
    2. Server responds with E_c(D_s(N_c,K_s)) where E_c is the client's encryption function based on its public key, D_s is the server's decryption function based on its private key, and K_s is the shared session key, randomly generated by the server.

The server should use the client name to look up the corresponding client public key.
Thus it will operate independently of IP address and it will support multiple users per client machine.

You may feel free to use existing implementations of the public key encryption and decryption algorithms as well as conventional symmetric crypto, e.g. AES.
You may also have your client and server do whatever you want as long as you can test it in a way that you are convinced of its correctness.
For fun, you might want the client to split into two processes: one copying from keyboard to socket and the other copying from socket to screen.
Then if the server fires off a child process running a shell, you'll have your own personal version of ssh.

As usual, your write-up should discuss your design as well as your test results.
Furthermore, you should include an analysis of the authentication to determine if it has any weaknesses in the face of replay attacks, man-in-the-middle attacks, imposters, etc.
